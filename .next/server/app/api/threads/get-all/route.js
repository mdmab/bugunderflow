"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/threads/get-all/route";
exports.ids = ["app/api/threads/get-all/route"];
exports.modules = {

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("path");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Fget-all%2Froute&page=%2Fapi%2Fthreads%2Fget-all%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Fget-all%2Froute.ts&appDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Fget-all%2Froute&page=%2Fapi%2Fthreads%2Fget-all%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Fget-all%2Froute.ts&appDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_muhtasim_Projects_Others_bug_underflow_app_api_threads_get_all_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/threads/get-all/route.ts */ \"(rsc)/./app/api/threads/get-all/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/threads/get-all/route\",\n        pathname: \"/api/threads/get-all\",\n        filename: \"route\",\n        bundlePath: \"app/api/threads/get-all/route\"\n    },\n    resolvedPagePath: \"/Users/muhtasim/Projects/Others/bug-underflow/app/api/threads/get-all/route.ts\",\n    nextConfigOutput,\n    userland: _Users_muhtasim_Projects_Others_bug_underflow_app_api_threads_get_all_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/threads/get-all/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZ0aHJlYWRzJTJGZ2V0LWFsbCUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGdGhyZWFkcyUyRmdldC1hbGwlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZ0aHJlYWRzJTJGZ2V0LWFsbCUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm11aHRhc2ltJTJGUHJvamVjdHMlMkZPdGhlcnMlMkZidWctdW5kZXJmbG93JTJGYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj0lMkZVc2VycyUyRm11aHRhc2ltJTJGUHJvamVjdHMlMkZPdGhlcnMlMkZidWctdW5kZXJmbG93JmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzhCO0FBQzNHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsdUdBQXVHO0FBQy9HO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDNko7O0FBRTdKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnVnX3VuZGVyZmxvdy8/NmNkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvbXVodGFzaW0vUHJvamVjdHMvT3RoZXJzL2J1Zy11bmRlcmZsb3cvYXBwL2FwaS90aHJlYWRzL2dldC1hbGwvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3RocmVhZHMvZ2V0LWFsbC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3RocmVhZHMvZ2V0LWFsbFwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvdGhyZWFkcy9nZXQtYWxsL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL211aHRhc2ltL1Byb2plY3RzL090aGVycy9idWctdW5kZXJmbG93L2FwcC9hcGkvdGhyZWFkcy9nZXQtYWxsL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL3RocmVhZHMvZ2V0LWFsbC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Fget-all%2Froute&page=%2Fapi%2Fthreads%2Fget-all%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Fget-all%2Froute.ts&appDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/threads/get-all/route.ts":
/*!******************************************!*\
  !*** ./app/api/threads/get-all/route.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// import { retrieveThreads } from \"../../../db/threads\"\n// const { MongoClient, Int32 } = require(\"mongodb\")\nconst { retrieveThreads, getAnswerCountByQid } = __webpack_require__(/*! ../../../db/threads */ \"(rsc)/./app/db/threads.js\");\nasync function GET() {\n    console.log(\"[Fetch] Fetching the list of threads...\");\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(await retrieveThreads());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL3RocmVhZHMvZ2V0LWFsbC9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUF3RDtBQUN4RCx3REFBd0Q7QUFDeEQsb0RBQW9EO0FBQ3BELE1BQU0sRUFBRUMsZUFBZSxFQUFFQyxtQkFBbUIsRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQyxzREFBcUI7QUFFdkUsZUFBZUM7SUFDcEJDLFFBQVFDLEdBQUcsQ0FBQztJQUNaLE9BQU9OLHFEQUFZQSxDQUFDTyxJQUFJLENBQUMsTUFBTU47QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9idWdfdW5kZXJmbG93Ly4vYXBwL2FwaS90aHJlYWRzL2dldC1hbGwvcm91dGUudHM/MTZiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCI7XG4vLyBpbXBvcnQgeyByZXRyaWV2ZVRocmVhZHMgfSBmcm9tIFwiLi4vLi4vLi4vZGIvdGhyZWFkc1wiXG4vLyBjb25zdCB7IE1vbmdvQ2xpZW50LCBJbnQzMiB9ID0gcmVxdWlyZShcIm1vbmdvZGJcIilcbmNvbnN0IHsgcmV0cmlldmVUaHJlYWRzLCBnZXRBbnN3ZXJDb3VudEJ5UWlkIH0gPSByZXF1aXJlKFwiLi4vLi4vLi4vZGIvdGhyZWFkc1wiKVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gR0VUKCkge1xuICBjb25zb2xlLmxvZyhcIltGZXRjaF0gRmV0Y2hpbmcgdGhlIGxpc3Qgb2YgdGhyZWFkcy4uLlwiKVxuICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oYXdhaXQgcmV0cmlldmVUaHJlYWRzKCkpXG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInJldHJpZXZlVGhyZWFkcyIsImdldEFuc3dlckNvdW50QnlRaWQiLCJyZXF1aXJlIiwiR0VUIiwiY29uc29sZSIsImxvZyIsImpzb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/threads/get-all/route.ts\n");

/***/ }),

/***/ "(rsc)/./app/db/threads.js":
/*!***************************!*\
  !*** ./app/db/threads.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addToDownvoters: () => (/* binding */ addToDownvoters),\n/* harmony export */   addToUpvoters: () => (/* binding */ addToUpvoters),\n/* harmony export */   addView: () => (/* binding */ addView),\n/* harmony export */   deleteReply: () => (/* binding */ deleteReply),\n/* harmony export */   deleteThreadById: () => (/* binding */ deleteThreadById),\n/* harmony export */   getAnswerCountByQid: () => (/* binding */ getAnswerCountByQid),\n/* harmony export */   postReply: () => (/* binding */ postReply),\n/* harmony export */   postThread: () => (/* binding */ postThread),\n/* harmony export */   removeFromDownvoters: () => (/* binding */ removeFromDownvoters),\n/* harmony export */   removeFromUpvoters: () => (/* binding */ removeFromUpvoters),\n/* harmony export */   retrieveMaxQid: () => (/* binding */ retrieveMaxQid),\n/* harmony export */   retrieveNextQid: () => (/* binding */ retrieveNextQid),\n/* harmony export */   retrieveThreadById: () => (/* binding */ retrieveThreadById),\n/* harmony export */   retrieveThreads: () => (/* binding */ retrieveThreads),\n/* harmony export */   retrieveThreadsByAuthor: () => (/* binding */ retrieveThreadsByAuthor),\n/* harmony export */   retrieveThreadsByQidAndAuthor: () => (/* binding */ retrieveThreadsByQidAndAuthor),\n/* harmony export */   retrieveThreadsSortedByView: () => (/* binding */ retrieveThreadsSortedByView),\n/* harmony export */   search: () => (/* binding */ search)\n/* harmony export */ });\nconst { MongoClient, Int32 } = __webpack_require__(/*! mongodb */ \"mongodb\");\nconst dotenv = (__webpack_require__(/*! dotenv */ \"(rsc)/./node_modules/dotenv/lib/main.js\").config)({\n    path: \".env.local\"\n});\nconst client = new MongoClient(process.env.MONGODB_URL);\nlet db = client.db(process.env.DB_NAME);\n/**\n *  Question:\n        title\n        content\n        tags\n        views\n        upvotes\n        downvotes\n        author\n        answers\n        creation_time\n */ async function retrieveThreads() {\n    console.log(\"[Fetch] Fetching the list of threads...\");\n    let res = await db.collection(\"new_questions\").find({}, {\n        \"projection\": {\n            \"qid\": 1,\n            \"title\": 1,\n            \"content\": 1,\n            \"tags\": 1,\n            \"views\": 1,\n            \"upvotes\": {\n                \"$size\": \"$upvoters\"\n            },\n            \"downvotes\": {\n                \"$size\": \"$downvoters\"\n            },\n            \"upvoters\": 1,\n            \"downvoters\": 1,\n            \"authorUsername\": 1,\n            \"createdAt\": 1,\n            \"answerCount\": {\n                \"$size\": \"$answers\"\n            }\n        }\n    }).toArray();\n    return res;\n}\nasync function retrieveThreadById(id) {\n    console.log(\"[DEBUG] qid \" + id);\n    return db.collection(\"new_questions\").findOne({\n        qid: Number(id)\n    }, {\n        \"projection\": {\n            \"qid\": 1,\n            \"title\": 1,\n            \"content\": 1,\n            \"tags\": 1,\n            \"views\": 1,\n            \"upvotes\": {\n                \"$size\": \"$upvoters\"\n            },\n            \"downvotes\": {\n                \"$size\": \"$downvoters\"\n            },\n            \"upvoters\": 1,\n            \"downvoters\": 1,\n            \"authorUsername\": 1,\n            \"createdAt\": 1,\n            \"answerCount\": {\n                \"$size\": \"$answers\"\n            },\n            \"answers\": {\n                \"aid\": 1,\n                \"authorUsername\": 1,\n                \"views\": 1,\n                \"createdAt\": 1,\n                \"content\": 1,\n                \"upvotes\": {\n                    \"$size\": \"$upvoters\"\n                },\n                \"downvotes\": {\n                    \"$size\": \"$downvoters\"\n                },\n                \"upvoters\": 1,\n                \"downvoters\": 1\n            }\n        }\n    });\n}\nasync function getAnswerCountByQid(id) {\n    console.log(\"[DEBUG | GET] Getting the number of answers for qid \" + id + \"...\");\n    return await db.collection(\"new_questions\").findOne({\n        qid: Number(id)\n    }, {\n        \"projection\": {\n            \"aCount\": {\n                \"$size\": \"$answers\"\n            }\n        }\n    });\n}\nasync function deleteThreadById(id) {\n    console.log(\"[DELETE] Deleting thread with qid \" + id + \"...\");\n    await db.collection(\"new_questions\").deleteOne({\n        \"qid\": Number(id)\n    });\n    console.log(\"*** SUCCESS ***\");\n}\nasync function retrieveMaxQid() {\n    console.log(\"[DEBUG | RETREIVE] Retrieving the max qid...\");\n    const maxQidThread = await db.collection(\"new_questions\").find({}, {\n        \"_id\": 0,\n        \"qid\": 1\n    }).sort({\n        \"qid\": -1\n    }).limit(1).toArray();\n    console.log(\"*** SUCCESS ***\");\n    return maxQidThread[0].qid;\n}\nasync function retrieveNextQid() {\n    return await retrieveMaxQid() + 1;\n}\nasync function postThread(title, content, tags, authorUsername, createdAt) {\n    // To be implemented...\n    console.log(\"[POST] Creating a new thread...\");\n    const nqid = await retrieveNextQid();\n    await db.collection(\"new_questions\").insertOne({\n        \"qid\": Number(nqid),\n        \"title\": title,\n        \"content\": content,\n        \"tags\": tags,\n        \"views\": 0,\n        \"upvotes\": 0,\n        \"downvotes\": 0,\n        \"upvoters\": [],\n        \"downvoters\": [],\n        \"answers\": [],\n        \"authorUsername\": authorUsername,\n        \"createdAt\": createdAt\n    });\n    console.log(\"*** SUCCESS ***\");\n}\nasync function postReply(qid, aid, content, author, creationTime) {\n    console.log(\"[DEBUG | POST] Adding a new reply to the question with qid \" + qid);\n    db.collection(\"new_questions\").updateOne({\n        qid: Number(qid)\n    }, {\n        \"$push\": {\n            \"answers\": {\n                \"aid\": Number(aid),\n                \"authorUsername\": author,\n                \"views\": 0,\n                \"upvotes\": 0,\n                \"downvotes\": 0,\n                \"upvoters\": [],\n                \"downvoters\": [],\n                \"createdAt\": creationTime,\n                \"content\": content\n            }\n        }\n    });\n}\nasync function deleteReply(qid, aid) {\n    console.log(\"[DEBUG | DELETE] Deleting reply from question (qid \" + qid + \")...\");\n    db.collection(\"new_questions\").updateMany({\n        qid: Number(qid)\n    }, {\n        \"$pull\": {\n            \"answers\": {\n                \"aid\": Number(aid)\n            }\n        }\n    });\n}\nasync function search(searchString) {\n    let words = searchString.split(\" \").filter((word)=>word != \"\").join(\"|\");\n    console.log(\"[SEARCH] Searching...\");\n    const res = await db.collection(\"new_questions\").find({\n        \"title\": {\n            \"$regex\": words,\n            \"$options\": \"i\"\n        }\n    }, {\n        \"projection\": {\n            \"qid\": 1,\n            \"title\": 1,\n            \"content\": 1,\n            \"tags\": 1,\n            \"views\": 1,\n            \"upvotes\": {\n                \"$size\": \"$upvoters\"\n            },\n            \"downvotes\": {\n                \"$size\": \"$downvoters\"\n            },\n            \"upvoters\": 1,\n            \"downvoters\": 1,\n            \"authorUsername\": 1,\n            \"createdAt\": 1,\n            \"answerCount\": {\n                \"$size\": \"$answers\"\n            },\n            \"answers\": {\n                \"aid\": 1,\n                \"authorUsername\": 1,\n                \"views\": 1,\n                \"createdAt\": 1,\n                \"content\": 1,\n                \"upvotes\": {\n                    \"$size\": \"$upvoters\"\n                },\n                \"downvotes\": {\n                    \"$size\": \"$downvoters\"\n                },\n                \"upvoters\": 1,\n                \"downvoters\": 1\n            }\n        }\n    }).toArray();\n    return res;\n}\nasync function addView(qid) {\n    console.log(\"[DEBUG] Incrementing the view count for qid \" + qid + \"...\");\n    await db.collection(\"new_questions\").updateOne({\n        \"qid\": Number(qid)\n    }, {\n        \"$inc\": {\n            \"views\": 1\n        }\n    });\n}\nasync function retrieveThreadsSortedByView() {\n    console.log(\"[DEBUG] Retrieving the threads, sorted by their view count...\");\n    const records = await db.collection(\"new_questions\").find({}, {\n        \"projection\": {\n            \"_id\": 0,\n            \"qid\": 1,\n            \"title\": 1\n        }\n    }).sort({\n        \"views\": -1\n    }).limit(5).toArray();\n    return records;\n}\nasync function retrieveThreadsByAuthor(authorUsername) {\n    console.log(\"[RETRIEVE] Retrieving the threads written by \" + authorUsername + \"...\");\n    const records = await db.collection(\"new_questions\").find({\n        \"authorUsername\": authorUsername\n    }, {\n        \"projection\": {\n            \"qid\": 1,\n            \"title\": 1,\n            \"content\": 1,\n            \"tags\": 1,\n            \"views\": 1,\n            \"upvotes\": {\n                \"$size\": \"$upvoters\"\n            },\n            \"downvotes\": {\n                \"$size\": \"$downvoters\"\n            },\n            \"upvoters\": 1,\n            \"downvoters\": 1,\n            \"authorUsername\": 1,\n            \"createdAt\": 1,\n            \"answerCount\": {\n                \"$size\": \"$answers\"\n            }\n        }\n    }).toArray();\n    return records;\n}\nasync function retrieveThreadsByQidAndAuthor(qid, authorUsername) {\n    console.log(\"[RETRIEVE] Retrieving the threads written by \" + authorUsername + \"...\");\n    const records = await db.collection(\"new_questions\").find({\n        \"authorUsername\": authorUsername,\n        \"qid\": Number(qid)\n    }, {\n        \"projection\": {\n            \"qid\": 1,\n            \"title\": 1,\n            \"content\": 1,\n            \"tags\": 1,\n            \"views\": 1,\n            \"upvotes\": {\n                \"$size\": \"$upvoters\"\n            },\n            \"downvotes\": {\n                \"$size\": \"$downvoters\"\n            },\n            \"upvoters\": 1,\n            \"downvoters\": 1,\n            \"authorUsername\": 1,\n            \"createdAt\": 1,\n            \"answerCount\": {\n                \"$size\": \"$answers\"\n            }\n        }\n    }).toArray();\n    return records;\n}\nasync function addToUpvoters(user, qid) {\n    console.log(\"[ADD] Adding \" + user + \" to upvoters list for thread \" + qid + \"...\");\n    await db.collection(\"new_questions\").updateOne({\n        qid: Number(qid)\n    }, {\n        \"$push\": {\n            \"upvoters\": user\n        }\n    });\n}\nasync function removeFromUpvoters(user, qid) {\n    console.log(\"[REMOVE] Removing \" + user + \" from upvoters list for thread \" + qid + \"...\");\n    await db.collection(\"new_questions\").updateOne({\n        qid: Number(qid)\n    }, {\n        \"$pull\": {\n            \"upvoters\": user\n        }\n    });\n}\nasync function addToDownvoters(user, qid) {\n    console.log(\"[ADD] Adding \" + user + \" to downvoters list for thread \" + qid + \"...\");\n    await db.collection(\"new_questions\").updateOne({\n        qid: Number(qid)\n    }, {\n        \"$push\": {\n            \"downvoters\": user\n        }\n    });\n}\nasync function removeFromDownvoters(user, qid) {\n    console.log(\"[REMOVE] Removing \" + user + \" from downvoters list for thread \" + qid + \"...\");\n    await db.collection(\"new_questions\").updateOne({\n        qid: Number(qid)\n    }, {\n        \"$pull\": {\n            \"downvoters\": user\n        }\n    });\n} // export default {\n //     retrieveThreads,\n //     retrieveThreadById,\n //     postReply,\n //     deleteReply\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/db/threads.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/dotenv"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fthreads%2Fget-all%2Froute&page=%2Fapi%2Fthreads%2Fget-all%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fthreads%2Fget-all%2Froute.ts&appDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmuhtasim%2FProjects%2FOthers%2Fbug-underflow&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();